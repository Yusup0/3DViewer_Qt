!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/_who/WORK/main_account/3DViewer/lib/3DViewer/srcs/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
GIF_FPS	mainwindow.cpp	/^#define GIF_FPS /;"	d	file:
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent)$/;"	f	class:MainWindow
MyWidgetOPenGL	mywidgetopengl.cpp	/^MyWidgetOPenGL::MyWidgetOPenGL(QWidget *parent)$/;"	f	class:MyWidgetOPenGL
ROTATE_VALUE	mainwindow.cpp	/^#define ROTATE_VALUE /;"	d	file:
__anon04d63ef30102	mainwindow.cpp	/^  connect(ui->widget, &QOpenGLWidget::resized, this, [&]() {$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30202	mainwindow.cpp	/^          [&]() { m_myWidget->setLineType(1); });$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30302	mainwindow.cpp	/^          [&]() { m_myWidget->setLineType(0); });$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30402	mainwindow.cpp	/^          [&]() { m_myWidget->setPointType(0); });$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30502	mainwindow.cpp	/^          [&]() { m_myWidget->setPointType(1); });$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30602	mainwindow.cpp	/^          [&]() { m_myWidget->setPointType(2); });$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30702	mainwindow.cpp	/^  connect(ui->hSlider_moveX, &QSlider::valueChanged, this, [&](int value) {$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30802	mainwindow.cpp	/^  connect(ui->hSlider_moveY, &QSlider::valueChanged, this, [&](int value) {$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30902	mainwindow.cpp	/^  connect(ui->hSlider_moveZ, &QSlider::valueChanged, this, [&](int value) {$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon04d63ef30a02	mainwindow.cpp	/^  connect(m_myWidget, &MyWidgetOPenGL::on_scaleStep, this, [&]() {$/;"	f	function:MainWindow::connectsConfiguration	file:
__anon96efaf250102	mywidgetopengl.cpp	/^  connect(m_pTimer, &QTimer::timeout, this, [&]() { update(); });$/;"	f	function:MyWidgetOPenGL::MyWidgetOPenGL	file:
changeBackgroundColor	mainwindow.cpp	/^void MainWindow::changeBackgroundColor(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
changeColorLines	mainwindow.cpp	/^void MainWindow::changeColorLines(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
changeColorPoints	mainwindow.cpp	/^void MainWindow::changeColorPoints(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
changeRotate	mywidgetopengl.cpp	/^void MyWidgetOPenGL::changeRotate() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
changeRotateSliders	mainwindow.cpp	/^void MainWindow::changeRotateSliders() {$/;"	f	class:MainWindow	typeref:typename:void
changeScale	mywidgetopengl.cpp	/^void MyWidgetOPenGL::changeScale(float value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
changeSizePoint	mainwindow.cpp	/^void MainWindow::changeSizePoint(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
changeWidthLines	mainwindow.cpp	/^void MainWindow::changeWidthLines(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
clickCluck	mainwindow.cpp	/^void MainWindow::clickCluck() {$/;"	f	class:MainWindow	typeref:typename:void
closeApp	mainwindow.cpp	/^void MainWindow::closeApp() { close(); }$/;"	f	class:MainWindow	typeref:typename:void
connectionsConfiguration	mywidgetopengl.cpp	/^void MyWidgetOPenGL::connectionsConfiguration() {}$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
connectsConfiguration	mainwindow.cpp	/^void MainWindow::connectsConfiguration() {$/;"	f	class:MainWindow	typeref:typename:void
decrementScale	mywidgetopengl.cpp	/^void MyWidgetOPenGL::decrementScale() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
defaultConfig	mainwindow.cpp	/^void MainWindow::defaultConfig() {$/;"	f	class:MainWindow	typeref:typename:void
defaultConfig	mywidgetopengl.cpp	/^void MyWidgetOPenGL::defaultConfig() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
displayObjects	mywidgetopengl.cpp	/^void MyWidgetOPenGL::displayObjects(e_typeDraw type_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
doGif	mainwindow.cpp	/^void MainWindow::doGif() {$/;"	f	class:MainWindow	typeref:typename:void
fileNameObject	mywidgetopengl.cpp	/^const QString &MyWidgetOPenGL::fileNameObject() const {$/;"	f	class:MyWidgetOPenGL	typeref:typename:const QString &
incrementScale	mywidgetopengl.cpp	/^void MyWidgetOPenGL::incrementScale() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
initializeGL	mywidgetopengl.cpp	/^void MyWidgetOPenGL::initializeGL() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
lineWidth	mainwindow.cpp	/^void MainWindow::lineWidth(unsigned nWidth_) {$/;"	f	class:MainWindow	typeref:typename:void
lineWidth	mywidgetopengl.cpp	/^void MyWidgetOPenGL::lineWidth(GLfloat nWidth_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
loadConfig	mywidgetopengl.cpp	/^bool MyWidgetOPenGL::loadConfig(QString path_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:bool
mouseMoveEvent	mywidgetopengl.cpp	/^void MyWidgetOPenGL::mouseMoveEvent(QMouseEvent *event) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
mousePressEvent	mywidgetopengl.cpp	/^void MyWidgetOPenGL::mousePressEvent(QMouseEvent *event) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
mouseReleaseEvent	mywidgetopengl.cpp	/^void MyWidgetOPenGL::mouseReleaseEvent(QMouseEvent *event) { Q_UNUSED(event); }$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
moveDirection	mywidgetopengl.cpp	/^void MyWidgetOPenGL::moveDirection(e_moveType direction_, float value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
moveObject	mainwindow.cpp	/^void MainWindow::moveObject(int type_, int value_) {$/;"	f	class:MainWindow	typeref:typename:void
moveRotation	mywidgetopengl.cpp	/^void MyWidgetOPenGL::moveRotation(e_moveRotatinoType direction_, float value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
moveX	mywidgetopengl.cpp	/^void MyWidgetOPenGL::moveX(float value_) { moveDirection(MOVE_X, value_); }$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
moveY	mywidgetopengl.cpp	/^void MyWidgetOPenGL::moveY(float value_) { moveDirection(MOVE_Y, value_); }$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
moveZ	mywidgetopengl.cpp	/^void MyWidgetOPenGL::moveZ(float value_) { moveDirection(MOVE_Z, value_); }$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
normalize_0_1	mywidgetopengl.cpp	/^int MyWidgetOPenGL::normalize_0_1(float val, float min, float max) const {$/;"	f	class:MyWidgetOPenGL	typeref:typename:int
openFileDialog	mainwindow.cpp	/^void MainWindow::openFileDialog() {$/;"	f	class:MainWindow	typeref:typename:void
paintGL	mywidgetopengl.cpp	/^void MyWidgetOPenGL::paintGL() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
qColorToRGB	mywidgetopengl.cpp	/^void MyWidgetOPenGL::qColorToRGB(const QColor &c_, float &r_, float &g_,$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
resizeGL	mywidgetopengl.cpp	/^void MyWidgetOPenGL::resizeGL(int w_, int h_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
rotateBuffX	mywidgetopengl.cpp	/^int MyWidgetOPenGL::rotateBuffX() const { return m_rotateBuffX; }$/;"	f	class:MyWidgetOPenGL	typeref:typename:int
rotateBuffY	mywidgetopengl.cpp	/^int MyWidgetOPenGL::rotateBuffY() const { return m_rotateBuffY; }$/;"	f	class:MyWidgetOPenGL	typeref:typename:int
rotateBuffZ	mywidgetopengl.cpp	/^int MyWidgetOPenGL::rotateBuffZ() const { return m_rotateBuffZ; }$/;"	f	class:MyWidgetOPenGL	typeref:typename:int
rotateX	mainwindow.cpp	/^void MainWindow::rotateX(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
rotateX	mywidgetopengl.cpp	/^void MyWidgetOPenGL::rotateX(int const value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
rotateY	mainwindow.cpp	/^void MainWindow::rotateY(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
rotateY	mywidgetopengl.cpp	/^void MyWidgetOPenGL::rotateY(int const value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
rotateZ	mainwindow.cpp	/^void MainWindow::rotateZ(int value_) {$/;"	f	class:MainWindow	typeref:typename:void
rotateZ	mywidgetopengl.cpp	/^void MyWidgetOPenGL::rotateZ(int const value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
scaleInputOut	mainwindow.cpp	/^void MainWindow::scaleInputOut(float value_) {$/;"	f	class:MainWindow	typeref:typename:void
scaleObject	mainwindow.cpp	/^void MainWindow::scaleObject(unsigned nScale_) {$/;"	f	class:MainWindow	typeref:typename:void
scalePressed	mainwindow.cpp	/^void MainWindow::scalePressed() {$/;"	f	class:MainWindow	typeref:typename:void
scaleString	mywidgetopengl.cpp	/^QString MyWidgetOPenGL::scaleString() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:QString
screenshot	mainwindow.cpp	/^void MainWindow::screenshot(int isJpeg) {$/;"	f	class:MainWindow	typeref:typename:void
screenshotBMP	mainwindow.cpp	/^void MainWindow::screenshotBMP() { screenshot(0); }$/;"	f	class:MainWindow	typeref:typename:void
screenshotJPEG	mainwindow.cpp	/^void MainWindow::screenshotJPEG() { screenshot(1); }$/;"	f	class:MainWindow	typeref:typename:void
setBackgroundColor	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setBackgroundColor(int value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setFileNameObject	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setFileNameObject(const QString &newFileNameObject) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setLineColor	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setLineColor(int value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setLineType	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setLineType(int newLineType) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setLineWidth	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setLineWidth(double newLineWidth) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setPointColor	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setPointColor(int value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setPointSize	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setPointSize(double newPointSize) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setPointType	mainwindow.cpp	/^void MainWindow::setPointType(int value_) { m_myWidget->setPointType(value_); }$/;"	f	class:MainWindow	typeref:typename:void
setPointType	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setPointType(int newPointType) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setRotateBuffX	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setRotateBuffX(int newRotateBuffX) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setRotateBuffY	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setRotateBuffY(int newRotateBuffY) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setRotateBuffZ	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setRotateBuffZ(int newRotateBuffZ) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
setScale	mywidgetopengl.cpp	/^void MyWidgetOPenGL::setScale(float value_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
startGif	mainwindow.cpp	/^void MainWindow::startGif() {$/;"	f	class:MainWindow	typeref:typename:void
timerTurnOnOff	mywidgetopengl.cpp	/^void MyWidgetOPenGL::timerTurnOnOff() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
updateData	mywidgetopengl.cpp	/^int MyWidgetOPenGL::updateData() {$/;"	f	class:MyWidgetOPenGL	typeref:typename:int
updateWidget	mainwindow.cpp	/^void MainWindow::updateWidget() {$/;"	f	class:MainWindow	typeref:typename:void
wheelEvent	mywidgetopengl.cpp	/^void MyWidgetOPenGL::wheelEvent(QWheelEvent *event) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:void
writeToFileConfig	mywidgetopengl.cpp	/^bool MyWidgetOPenGL::writeToFileConfig(QString path_) {$/;"	f	class:MyWidgetOPenGL	typeref:typename:bool
~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow() {$/;"	f	class:MainWindow
~MyWidgetOPenGL	mywidgetopengl.cpp	/^MyWidgetOPenGL::~MyWidgetOPenGL() {$/;"	f	class:MyWidgetOPenGL
